= Fixie

Fixie is a library for creating test databases in Rails. It
supplements <tt>db:test:prepare</tt> to populate the test DB from Ruby
fixture files.

Fixie uses ActiveRecord to populate the test database, but it also
gives re-usable IDs to the records you create so you can easily refer
to them in tests. (These IDs are created with
<tt>Fixtures.identify</tt>, so they are the same IDs used by Rails
fixtures.)

== Motivation

Fixtures suck because they are difficult to maintain and don't
validate the records that are inserted.

Factories provide a nice solution to the validation problem, but make
it difficult to set up a complicated object graph.

I've developed ad hoc test database pre-population scripts that allow
creation of complicated object graphs, but make it difficult to pull
out specific records because unlike fixtures or factories, you don't
have an easy to use identifier.

Fixie allows you to pre-populate your database with example data that
is validated by ActiveRecord, yet can easily be retrieved in tests.

It is also compatible with the use of factories, so you can lay down a
base layer of objects and then build specific objects for tests as
needed.

== Usage

In the <tt>test/fixie directory</tt>, create an <tt>*.rb</tt> file to populate the database:

    Foobar.fixie(:record_name, :name => "my record", :email => "test@example.com")

Records created in this way are returned for use later in the population script:

    admin = Role.fixie(:admin, :name => 'admin')

    sam = Person.fixie(:sam, :name => "Sam Smith", :email => "sam@example.com")
    sam.roles << admin

If you have a <tt>belongs_to</tt> association, you can also associate objects like this:

    schwinn = Manufacturer.fixie(:schwinn, :name => 'Schwinn Bicycle Company', :founded => 1895)

    continental = Bicycle.fixie(:continental, :name => 'Continental', :speeds => 10, :manufacturer => schwinn)

This works because Fixie sends <tt>attr=</tt> to the object being
created, so ActiveRecord associates the parent object with the child.

Invalid records will raise an exception and your tests will not run.

You may have as may fixie files as you like, so organize the test data however it makes sense.

In tests, you can look up that record like this:

   @sam = Fixie.people(:sam)

If the object with that record ID doesn't exist, an exception will be raised.

Your test database will be populated with records before the tests
run. This is accomplished by appending to the <tt>db:test:prepare</tt>
task and inserting the records into the test database by loading the
fixie files.

<b>NOTE:</b> creating a test database in NOT compatible with using fixtures
(at least not for the same tables), because loading fixtures deletes
all existing records.

== Feedback

This is a work in progress. I am currently using Fixie as I feel it's
better than the ad hoc scripts I used before, but I am eager to hear
your suggestions on how to improve this library.

Some ideas I have:

* allow use of the fixture or fixture-style methods (like <tt>bicycles(:foobar)</tt>)
* change the lookup method to be <tt>ClassName.fixie(:record_name)</tt>
* don't polute <tt>ActiveRecord::Base</tt> with the +fixie+ method except in tests?

Copyright (c) 2009 Luke Francl, released under the MIT license.
